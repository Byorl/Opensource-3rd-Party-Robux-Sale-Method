"""
Simple GitHub Key Generator
Generates keys and adds them to existing stock automatically.
"""

import secrets
import string
import json
import sys
from datetime import datetime
from typing import List
from github_stock import GitHubStockManager

def generate_key(product_type: str = "7day") -> str:
    """Generate a single premium key."""
    timestamp = datetime.now().strftime("%Y%m")
    
    if product_type == "7day" or product_type == "7d":
        prefix = f"BH7D_{timestamp}"
    elif product_type == "30day" or product_type == "30d":
        prefix = f"BH30D_{timestamp}"
    elif product_type == "lifetime":
        prefix = f"BHLIFE_{timestamp}"
    else:
        prefix = f"BH_{product_type.upper()}_{timestamp}"
    
    chars = string.ascii_letters + string.digits
    random_part = ''.join(secrets.choice(chars) for _ in range(12))
    return f"{prefix}_{random_part}"

def generate_keys(count: int, product_type: str = "7day", existing_keys: set = None) -> List[str]:
    """Generate multiple unique keys, avoiding duplicates with existing keys."""
    if existing_keys is None:
        existing_keys = set()
    
    keys = set()
    max_attempts = count * 10 
    attempts = 0
    
    while len(keys) < count and attempts < max_attempts:
        key = generate_key(product_type)
        if key not in existing_keys and key not in keys:
            keys.add(key)
        attempts += 1
    
    if attempts >= max_attempts:
        print(f"[!] Warning: Could only generate {len(keys)} unique keys after {max_attempts} attempts")
    
    return list(keys)

def load_config():
    """Load GitHub configuration."""
    try:
        with open('config/products.json', 'r') as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f"[X] Failed to load config: {e}")
        sys.exit(1)

def get_product_info(product_id: str, config: dict):
    """Get product information by ID."""
    for product in config['products']:
        if product['id'] == product_id or product['id'].startswith(product_id):
            return product
    return None

def show_status():
    """Show current stock status with enhanced display."""
    config = load_config()
    github_config = config.get('github', {})
    
    if not github_config.get('token'):
        print("[X] GitHub not configured")
        return
    
    manager = GitHubStockManager(
        token=github_config.get('token'),
        repo_owner=github_config.get('repo_owner'),
        repo_name=github_config.get('repo_name')
    )
    
    print("Current Stock Status")
    print("=" * 50)
    
    total_keys = 0
    for product in config['products']:
        github_file = product.get('stockGithubFile')
        if github_file:
            stock_count = manager.get_stock_count(github_file)
            total_keys += stock_count
            
            if stock_count == 0:
                status = "[!] OUT OF STOCK"
            elif stock_count < 10:
                status = "[!] LOW STOCK"
            else:
                status = "[+] IN STOCK"
            
            print(f"[*] {product['name']:<15} {stock_count:>3} keys  {status}")
        else:
            print(f"[*] {product['name']:<15} --- keys  [-] NOT CONFIGURED")
    
    print("=" * 50)
    print(f"[+] Total Keys Available: {total_keys}")
    
    if total_keys < 20:
        print("[!] Recommendation: Generate more keys soon")
    elif total_keys < 50:
        print("[i] Recommendation: Consider generating more keys")
    else:
        print("[+] Stock levels look good!")

def main():
    """Main function - simplified interface."""
    if len(sys.argv) < 2:
        print("ByorlHub Key Generator")
        print("=" * 30)
        print("Usage:")
        print("  python github_key_generator.py <count> [product]")
        print("")
        print("Examples:")
        print("  python github_key_generator.py 50        # Add 50 keys to 7-day stock")
        print("  python github_key_generator.py 25 7d     # Add 25 keys to 7-day stock")
        print("  python github_key_generator.py 10 30d    # Add 10 keys to 30-day stock")
        print("  python github_key_generator.py status    # Show current stock")
        print("")
        return
    
    if sys.argv[1].lower() == 'status':
        show_status()
        return
    
    try:
        count = int(sys.argv[1])
    except ValueError:
        print("[X] First argument must be a number")
        return
    
    product_type = sys.argv[2] if len(sys.argv) > 2 else "7day"
    
    if count <= 0:
        print("[X] Count must be greater than 0")
        return
    
    if count > 500:
        print("[X] Maximum 500 keys per generation")
        return
    
    config = load_config()
    github_config = config.get('github', {})
    
    if not github_config.get('token'):
        print("[X] GitHub not configured in config/products.json")
        return
    
    manager = GitHubStockManager(
        token=github_config.get('token'),
        repo_owner=github_config.get('repo_owner'),
        repo_name=github_config.get('repo_name')
    )
    
    product = get_product_info(product_type, config)
    if not product:
        print(f"[X] Product '{product_type}' not found")
        print("Available products: 7day (7d), 30day (30d)")
        return
    
    github_file = product.get('stockGithubFile')
    if not github_file:
        print(f"[X] No GitHub file configured for {product['name']}")
        return
    
    current_stock = manager.get_file_content(github_file)
    print(f"[*] Current stock: {len(current_stock)} keys")
    
    print(f"[~] Checking for existing keys to prevent duplicates...")
    stock_files = []
    bought_files = []
    
    for prod in config['products']:
        stock_file = prod.get('stockGithubFile')
        if stock_file:
            stock_files.append(stock_file)
    
    bought_file = github_config.get('bought_file')
    if bought_file:
        bought_files.append(bought_file)
    
    existing_keys = manager.get_all_existing_keys(stock_files, bought_files)
    print(f"[*] Found {len(existing_keys)} existing keys across all files")
    
    print(f"[~] Generating {count} new unique keys...")
    new_keys = generate_keys(count, product_type, existing_keys)
    
    if len(new_keys) < count:
        print(f"[!] Warning: Only generated {len(new_keys)} keys instead of {count}")
    
    print(f"[~] Adding keys to {product['name']} stock...")
    success = manager.add_keys_to_stock(github_file, new_keys)
    
    if success:
        total_stock = len(current_stock) + len(new_keys)
        print(f"[+] Success! Added {len(new_keys)} keys")
        print(f"[*] Total stock: {total_stock} keys")
        print(f"[*] File: {github_file}")
        
        duplicates_found = []
        for key in new_keys:
            if key in existing_keys:
                duplicates_found.append(key)
        
        if duplicates_found:
            print(f"[!] WARNING: {len(duplicates_found)} duplicate keys detected!")
            for dup in duplicates_found[:3]:
                print(f"  - {dup}")
        else:
            print(f"[+] Duplicate check passed - all keys are unique")
        
        print(f"\n[+] Sample keys added:")
        for i, key in enumerate(new_keys[:3], 1):
            print(f"  {i}. {key}")
        if len(new_keys) > 3:
            print(f"  ... and {len(new_keys) - 3} more")
    else:
        print(f"[X] Failed to add keys to stock")

if __name__ == "__main__":
    main()
